{
    "contents" : "# server.R\nrequire(\"jsonlite\")\nrequire(\"RCurl\")\nrequire(ggplot2)\nrequire(dplyr)\nrequire(shiny)\nrequire(shinydashboard)\nrequire(leaflet)\n\nshinyServer(function(input, output) {\n  \n  KPI_Low_Max_value <- reactive({input$KPI1}) \n  \n  df1 <- eventReactive(input$clicks, {data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query=\"select * from STORMEVENTS\"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_apb766', PASS='orcl_apb766', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))  %>% select(., EVENT_TYPE, STATE, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME) %>% mutate(DAMAGE_CROPS = strtoi(DAMAGE_CROPS), DAMAGE_PROPERTY = strtoi(DAMAGE_PROPERTY)) %>% filter(., DAMAGE_CROPS > 1 | DAMAGE_PROPERTY > 1) %>% filter(., DAMAGE_CROPS != \"null\" & DAMAGE_PROPERTY != \"null\") %>% mutate(., DAMAGE_KPI = (as.numeric(DAMAGE_CROPS) + as.numeric(DAMAGE_PROPERTY)) / (as.numeric(END_TIME) - as.numeric(BEGIN_TIME))) %>% filter(DAMAGE_KPI != Inf) %>% arrange(STATE) %>% distinct() %>% group_by(., EVENT_TYPE, STATE) %>% mutate(KPI = cumsum(DAMAGE_KPI)) %>% mutate(MAX = max(KPI)) %>% select(EVENT_TYPE, STATE, MAX) %>% distinct() %>% filter(MAX > KPI_Low_Max_value()) })\n  \n  output$distPlot1 <- renderPlot({             \n    plot <- ggplot() + \n      coord_cartesian() + \n      scale_x_discrete() +\n      scale_y_discrete() +\n      scale_fill_gradient2(low=\"white\", mid = \"red\", high= \"darkred\", midpoint = 7500) +\n      labs(title=input$title) +\n      labs(x=paste(\"Disaster\"), y=paste(\"State\")) +\n      layer(data=df1(), \n            mapping=aes(x=EVENT_TYPE, y=STATE, fill = MAX), \n            stat=\"identity\", \n            stat_params=list(), \n            geom=\"tile\",\n            geom_params=list(), \n            position=position_identity()\n      )\n    \n    plot\n  })\n  observeEvent(input$clicks, {\n    print(as.numeric(input$clicks))\n  })\n  \n  # Begin code for Second Tab:\n  \n  df2 <- eventReactive(input$clicks2, {data.frame(fromJSON(getURL(URLencode(gsub(\"\\n\", \" \", 'skipper.cs.utexas.edu:5001/rest/native/?query=\n                                                                                 \"select color, clarity, avg_price, avg(avg_price) \n                                                                                 OVER (PARTITION BY clarity ) as window_avg_price\n                                                                                 from (select color, clarity, avg(price) avg_price\n                                                                                 from diamonds\n                                                                                 group by color, clarity)\n                                                                                 order by clarity;\"\n                                                                                 ')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_UTEid', PASS='orcl_UTEid', \n                                                                                                   MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))\n  })\n  \n  output$distPlot2 <- renderPlot(height=1000, width=2000, {\n    plot1 <- ggplot() + \n      coord_cartesian() + \n      scale_x_discrete() +\n      scale_y_continuous() +\n      facet_wrap(~CLARITY, ncol=1) +\n      labs(title='Diamonds Barchart\\nAVERAGE_PRICE, WINDOW_AVG_PRICE, ') +\n      labs(x=paste(\"COLOR\"), y=paste(\"AVG_PRICE\")) +\n      layer(data=df2(), \n            mapping=aes(x=COLOR, y=AVG_PRICE), \n            stat=\"identity\", \n            stat_params=list(), \n            geom=\"bar\",\n            geom_params=list(colour=\"blue\"), \n            position=position_identity()\n      ) + coord_flip() +\n      layer(data=df2(), \n            mapping=aes(x=COLOR, y=AVG_PRICE, label=round(AVG_PRICE - WINDOW_AVG_PRICE)), \n            stat=\"identity\", \n            stat_params=list(), \n            geom=\"text\",\n            geom_params=list(colour=\"black\", hjust=-1), \n            position=position_identity()\n      ) +\n      layer(data=df2(), \n            mapping=aes(yintercept = WINDOW_AVG_PRICE), \n            geom=\"hline\",\n            geom_params=list(colour=\"red\")\n      )\n    plot1\n  })\n  \n  # Begin code for Third Tab:\n  \n  df3 <- eventReactive(input$clicks3, {data.frame(fromJSON(getURL(URLencode(gsub(\"\\n\", \" \", 'skipper.cs.utexas.edu:5001/rest/native/?query=\n                                                                                 \"\"\"select region || \\\\\\' \\\\\\' || \\\\\\'Sales\\\\\\' as measure_names, sum(sales) as measure_values from SUPERSTORE_SALES_ORDERS\n                                                                                 where country_region = \\\\\\'United States of America\\\\\\'\n                                                                                 group by region\n                                                                                 union all\n                                                                                 select market || \\\\\\' \\\\\\' || \\\\\\'Coffee_Sales\\\\\\' as measure_names, sum(coffee_sales) as measure_values from COFFEE_CHAIN\n                                                                                 group by market\n                                                                                 order by 1;\"\"\"\n                                                                                 ')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_UTEid', PASS='orcl_UTEid', \n                                                                                                   MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))\n  })\n  \n  output$distPlot3 <- renderPlot(height=1000, width=2000, {\n    plot3 <- ggplot() + \n      coord_cartesian() + \n      scale_x_discrete() +\n      scale_y_continuous() +\n      #facet_wrap(~CLARITY, ncol=1) +\n      labs(title='Blending 2 Data Sources') +\n      labs(x=paste(\"Region Sales\"), y=paste(\"Sum of Sales\")) +\n      layer(data=df3(), \n            mapping=aes(x=MEASURE_NAMES, y=MEASURE_VALUES), \n            stat=\"identity\", \n            stat_params=list(), \n            geom=\"bar\",\n            geom_params=list(colour=\"blue\"), \n            position=position_identity()\n      ) + coord_flip() +\n      layer(data=df3(), \n            mapping=aes(x=MEASURE_NAMES, y=MEASURE_VALUES, label=round(MEASURE_VALUES)), \n            stat=\"identity\", \n            stat_params=list(), \n            geom=\"text\",\n            geom_params=list(colour=\"black\", hjust=-0.5), \n            position=position_identity()\n      )\n    plot3\n  })\n})\n",
    "created" : 1448300305303.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2957092498",
    "id" : "CB45D27C",
    "lastKnownWriteTime" : 1448300381,
    "path" : "~/DataVisualization/DV_SProject/02 Shiny/server.R",
    "project_path" : "02 Shiny/server.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}